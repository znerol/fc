/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
  static = false;
}

PARSER_BEGIN(CalculatorGrammer)
package fc.grammar.javacc;
import fc.lang.AssignementExpression;
import fc.lang.ChangeSignFunction;
import fc.lang.ConstantValueExpression;
import fc.lang.DifferenceFunction;
import fc.lang.DivisionFunction;
import fc.lang.Expression;
import fc.lang.FunctionExpression;
import fc.lang.MultiplicationFunction;
import fc.lang.SumFunction;
import fc.lang.VariableExpression;

public class CalculatorGrammer
{
  
}

PARSER_END(CalculatorGrammer)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
}

TOKEN : /* parenthesis */
{
  < LPAREN : "(" >
| < RPAREN : ")" >
}

TOKEN : /* assignment */
{
  < EQUAL : "=" >
| < LET : "let" >
}

TOKEN : /* decimal number */
{
  < NUMBER : (< DIGIT >)+ | (< DIGIT >)+ "." (< DIGIT >)+ | (< DIGIT >)+ "." |
"." (< DIGIT >)+ >

| < #DIGIT : [ "0"-"9" ] >
}

TOKEN : /* identifier */
{
  < IDENTIFIER : [ "a" - "z", "A" - "Z" ] >
}

Expression parse() :
{  Expression result;
}
{  result = parseStatement()
  < EOF >
  {    return result;
  }
}

Expression parseStatement() :
{
  Token token;
  Expression result;
  Expression expression;
}
{
  (
    < LET >
    token = < IDENTIFIER >
    < EQUAL >
    {
      expression = parseExpression();
      result = new AssignementExpression(token.toString(), expression);
    }
  |
    result = parseExpression()
  )
  {
    return result;
  }
}

Expression parseExpression() :
{
    Expression result;
    Expression term;
}
{
  result = parseTerm()
  (
    (
      < PLUS >
      {
        term = parseTerm();
        result = new FunctionExpression(new SumFunction(), result, term);
      }
    |
      < MINUS >
      {
        term = parseTerm();
        result = new FunctionExpression(new DifferenceFunction(), result, term);
      }
    )
  )*
  {
    return result;
  }
}

Expression parseTerm() :
{
    Expression result;
    Expression factor;
}
{
  result = parseFactor()
  (
    (
      < MULTIPLY >
      {
        factor = parseFactor();
        result = new FunctionExpression(new MultiplicationFunction(), result, factor);
      }
    |
      < DIVIDE >
      {
        factor = parseFactor();
        result = new FunctionExpression(new DivisionFunction(), result, factor);
      }
    )
  )*
  {
    return result;
  }
}

Expression parseFactor() :
{
  Expression result;
  Expression factor;
}
{
  (
    < MINUS >
    factor = parseUnsignedFactor()
    {
      result = new FunctionExpression(new ChangeSignFunction(), factor);
    }
  |
    result = parseUnsignedFactor()
  )
  {
    return result;
  }
}

Expression parseUnsignedFactor() :
{
  Expression result;
  Token token;
}
{
  (
    token = < NUMBER >
    {
      result = new ConstantValueExpression(Double.parseDouble(token.toString()));
    }
  |
    token = < IDENTIFIER >
    {
      result = new VariableExpression(token.toString());
    }
  |
    < LPAREN >
    result = parseExpression()
    < RPAREN >
  )
  {
    return result;
  }
}
